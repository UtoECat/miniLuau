/* @@@@@ PACK.LUA : THIS FILE WAS AUTOGENERATED USING PACK.lua v.2.0!
 * @@@@@ SEE https://github.com/UtoECat/miniLuau/blob/main/PACK.lua FOR DETAILS
 */
/*
 * Luau programming language.
 * MIT License
 *
 * Copyright (c) 2019-2024 Roblox Corporation
 * Copyright (c) 1994â€“2019 Lua.org, PUC-Rio.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// only once
#pragma once
// @@@@@ PACK.lua : done, inlined <Config/include/Luau/Config.h>

#line __LINE__ "Config/include/Luau/Config.h"

// This file is part of the Luau programming language and is licensed under MIT
// License; see LICENSE.txt for details// @@@@@ PACK.lua : done, inlined
// <Config/include/Luau/LinterConfig.h>

#line __LINE__ "Luau/LinterConfig.h"

// This file is part of the Luau programming language and is licensed under MIT
// License; see LICENSE.txt for details
#include "luau_ast_int.hpp"

// @@@@@ PACK.lua : not found, likely and std header
#include <string>

// @@@@@ PACK.lua : not found, likely and std header
#include <vector>

// @@@@@ PACK.lua : not found, likely and std header
#include <stdint.h>

namespace Luau {

struct HotComment;

struct LintWarning {
  // Make sure any new lint codes are documented here:
  // https://luau-lang.org/lint Note that in Studio, the active set of lint
  // warnings is determined by FStringStudioLuauLints
  enum Code {
    Code_Unknown = 0,

    Code_UnknownGlobal = 1, // superseded by type checker
    Code_DeprecatedGlobal = 2,
    Code_GlobalUsedAsLocal = 3,
    Code_LocalShadow = 4,       // disabled in Studio
    Code_SameLineStatement = 5, // disabled in Studio
    Code_MultiLineStatement = 6,
    Code_LocalUnused = 7,    // disabled in Studio
    Code_FunctionUnused = 8, // disabled in Studio
    Code_ImportUnused = 9,   // disabled in Studio
    Code_BuiltinGlobalWrite = 10,
    Code_PlaceholderRead = 11,
    Code_UnreachableCode = 12,
    Code_UnknownType = 13,
    Code_ForRange = 14,
    Code_UnbalancedAssignment = 15,
    Code_ImplicitReturn =
        16, // disabled in Studio, superseded by type checker in strict mode
    Code_DuplicateLocal = 17,
    Code_FormatString = 18,
    Code_TableLiteral = 19,
    Code_UninitializedLocal = 20,
    Code_DuplicateFunction = 21,
    Code_DeprecatedApi = 22,
    Code_TableOperations = 23,
    Code_DuplicateCondition = 24,
    Code_MisleadingAndOr = 25,
    Code_CommentDirective = 26,
    Code_IntegerParsing = 27,
    Code_ComparisonPrecedence = 28,
    Code_RedundantNativeAttribute = 29,

    Code__Count
  };

  Code code;
  Location location;
  std::string text;

  static const char *getName(Code code);
  static Code parseName(const char *name);
  static uint64_t parseMask(const std::vector<HotComment> &hotcomments);
};

struct LintOptions {
  uint64_t warningMask = 0;

  void enableWarning(LintWarning::Code code) { warningMask |= 1ull << code; }
  void disableWarning(LintWarning::Code code) {
    warningMask &= ~(1ull << code);
  }

  bool isEnabled(LintWarning::Code code) const {
    return 0 != (warningMask & (1ull << code));
  }

  void setDefaults();
};

// clang-format off
static const char* kWarningNames[] = {
    "Unknown",

    "UnknownGlobal",
    "DeprecatedGlobal",
    "GlobalUsedAsLocal",
    "LocalShadow",
    "SameLineStatement",
    "MultiLineStatement",
    "LocalUnused",
    "FunctionUnused",
    "ImportUnused",
    "BuiltinGlobalWrite",
    "PlaceholderRead",
    "UnreachableCode",
    "UnknownType",
    "ForRange",
    "UnbalancedAssignment",
    "ImplicitReturn",
    "DuplicateLocal",
    "FormatString",
    "TableLiteral",
    "UninitializedLocal",
    "DuplicateFunction",
    "DeprecatedApi",
    "TableOperations",
    "DuplicateCondition",
    "MisleadingAndOr",
    "CommentDirective",
    "IntegerParsing",
    "ComparisonPrecedence",
    "RedundantNativeAttribute",
};
// clang-format on

static_assert(std::size(kWarningNames) == unsigned(LintWarning::Code__Count),
              "did you forget to add warning to the list?");

} // namespace Luau

#line __LINE__ "Config/include/Luau/Config.h"

// @@@@@ DONE : was aleready included <Luau/ParseOptions.h>

// @@@@@ PACK.lua : not found, likely and std header
#include <optional>

// @@@@@ PACK.LUA : was already included! <string>

// @@@@@ PACK.lua : not found, likely and std header
#include <unordered_map>

// @@@@@ PACK.LUA : was already included! <vector>

namespace Luau {

using ModuleName = std::string;

constexpr const char *kConfigName = ".luaurc";

struct Config {
  Config();

  Mode mode = Mode::Nonstrict;

  ParseOptions parseOptions;

  LintOptions enabledLint;
  LintOptions fatalLint;

  bool lintErrors = false;
  bool typeErrors = true;

  std::vector<std::string> globals;

  std::vector<std::string> paths;
  std::unordered_map<std::string, std::string> aliases;
};

struct ConfigResolver {
  virtual ~ConfigResolver() {}

  virtual const Config &getConfig(const ModuleName &name) const = 0;
};

struct NullConfigResolver : ConfigResolver {
  Config defaultConfig;

  virtual const Config &getConfig(const ModuleName &name) const override;
};

std::optional<std::string>
parseModeString(Mode &mode, const std::string &modeString, bool compat = false);
std::optional<std::string> parseLintRuleString(LintOptions &enabledLints,
                                               LintOptions &fatalLints,
                                               const std::string &warningName,
                                               const std::string &value,
                                               bool compat = false);

bool isValidAlias(const std::string &alias);

std::optional<std::string> parseConfig(const std::string &contents,
                                       Config &config, bool compat = false);

} // namespace Luau

#line __LINE__ "luau_config_int.hpp"

// @@@@@ PACK.LUA : was already included! <Config/include/Luau/LinterConfig.h>
